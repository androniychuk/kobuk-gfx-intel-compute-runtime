Author: Andreas Beckmann <anbe@debian.org>
Description: fix typos found by Lintian

--- a/opencl/source/scheduler/scheduler.cl
+++ b/opencl/source/scheduler/scheduler.cl
@@ -2629,7 +2629,7 @@ void UpdateEventsTreeStatusParallel( clk
             {
                 TEMP_IGIL_FreeEvent( eventId, eventsPool );
             }
-            //This event transitions to CL_COMPLETE state, update it profiling informations.
+            //This event transitions to CL_COMPLETE state, update it profiling information.
             if( isProfilingEnabled != 0 )
             {
                 //CL COMPLETE time is before this scheduler starts
--- a/shared/offline_compiler/source/multi_command.cpp
+++ b/shared/offline_compiler/source/multi_command.cpp
@@ -40,7 +40,7 @@ int MultiCommand::singleBuild(const std:
     if (retVal == OfflineCompiler::ErrorCode::SUCCESS) {
         outputFile << getCurrentDirectoryOwn(outDirForBuilds) + outFileName;
     } else {
-        outputFile << "Unsuccesful build";
+        outputFile << "Unsuccessful build";
     }
     outputFile << '\n';
 
@@ -161,7 +161,7 @@ Usage: ocloc multi <file_name>
                 '-file <filename> -device <device_type> [compile_options].
                 See 'ocloc compile --help' for available compile_options.
                 Results of subsequent compilations will be dumped into 
-                a directory with name indentical file_name's base name.
+                a directory with name identical file_name's base name.
 
   -output_file_list             Name of optional file containing 
                                 paths to outputs .bin files
--- a/shared/source/compiler_interface/linker.cpp
+++ b/shared/source/compiler_interface/linker.cpp
@@ -427,7 +427,7 @@ std::string constructRelocationsDebugMes
         return "";
     }
     std::stringstream stream;
-    stream << "Relocations debug informations :\n";
+    stream << "Relocations debug information :\n";
     for (const auto &symbol : relocatedSymbols) {
         stream << " * \"" << symbol.first << "\" [" << symbol.second.symbol.size << " bytes]";
         stream << " " << asString(symbol.second.symbol.segment) << "_SEGMENT@" << symbol.second.symbol.offset;
--- a/shared/source/compiler_interface/linker.h
+++ b/shared/source/compiler_interface/linker.h
@@ -36,7 +36,7 @@ enum class LinkingStatus : uint32_t {
 inline const char *asString(SegmentType segment) {
     switch (segment) {
     default:
-        return "UNKOWN";
+        return "UNKNOWN";
     case SegmentType::GlobalConstants:
         return "GLOBAL_CONSTANTS";
     case SegmentType::GlobalVariables:
--- a/shared/test/unit_test/compiler_interface/linker_tests.cpp
+++ b/shared/test/unit_test/compiler_interface/linker_tests.cpp
@@ -25,7 +25,7 @@
 #include <string>
 
 TEST(SegmentTypeTests, givenSegmentTypeWhenAsStringIsCalledThenProperRepresentationIsReturned) {
-    EXPECT_STREQ("UNKOWN", NEO::asString(NEO::SegmentType::Unknown));
+    EXPECT_STREQ("UNKNOWN", NEO::asString(NEO::SegmentType::Unknown));
     EXPECT_STREQ("GLOBAL_CONSTANTS", NEO::asString(NEO::SegmentType::GlobalConstants));
     EXPECT_STREQ("GLOBAL_VARIABLES", NEO::asString(NEO::SegmentType::GlobalVariables));
     EXPECT_STREQ("INSTRUCTIONS", NEO::asString(NEO::SegmentType::Instructions));
@@ -1793,7 +1793,7 @@ TEST(RelocationsDebugMessageTests, given
     auto message = NEO::constructRelocationsDebugMessage(symbols);
 
     std::stringstream expected;
-    expected << "Relocations debug informations :\n";
+    expected << "Relocations debug information :\n";
     for (const auto &symbol : symbols) {
         if (symbol.first == "foo") {
             expected << " * \"foo\" [1024 bytes] INSTRUCTIONS_SEGMENT@64 -> 0x1000 GPUVA\n";
@@ -1956,4 +1956,4 @@ TEST(LinkerTests, GivenDebugDataWhenAppl
     EXPECT_EQ(expectedValue3, *reloc3Location);
     EXPECT_EQ(0u, *reloc4Location);
     EXPECT_EQ(expectedValue5, *reloc5Location);
-}
\ No newline at end of file
+}
